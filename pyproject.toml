[project]
name = "fireshot"
version = "1.0.0"
description = "Firecrawl 云 API 最佳实践和 HawaiiHub 数据采集"
authors = [
    {name = "HawaiiHub AI Team", email = "ai@hawaiihub.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "firecrawl-py>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.9",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
]

[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

# =============================================================================
# Ruff 配置 - Python Linter & Formatter
# =============================================================================
[tool.ruff]
# 行长度（项目标准：88字符）
line-length = 88

# 目标 Python 版本
target-version = "py311"

# 排除目录
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

# =============================================================================
# Ruff Linting 规则
# =============================================================================
[tool.ruff.lint]
# 启用的规则集
select = [
    # Pycodestyle
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings

    # Pyflakes
    "F",      # pyflakes

    # Import sorting
    "I",      # isort

    # Bugbear
    "B",      # flake8-bugbear

    # Comprehensions
    "C4",     # flake8-comprehensions

    # Type checking
    "ANN",    # flake8-annotations（类型注解）

    # Docstrings
    "D",      # pydocstyle（文档字符串）

    # Security
    "S",      # flake8-bandit

    # Simplify
    "SIM",    # flake8-simplify

    # Return
    "RET",    # flake8-return

    # Unused arguments
    "ARG",    # flake8-unused-arguments

    # Path
    "PTH",    # flake8-use-pathlib

    # Logging
    "G",      # flake8-logging-format
]

# 忽略的规则
ignore = [
    # 文档字符串相关（过于严格）
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D203",   # 1 blank line required before class docstring（与D211冲突）
    "D213",   # Multi-line docstring summary should start at the second line（与D212冲突）

    # 类型注解相关（逐步迁移）
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed

    # 安全相关（根据实际情况）
    "S101",   # Use of assert detected（测试中需要）
    "S301",   # pickle usage（某些场景需要）

    # 其他
    "B008",   # Do not perform function calls in argument defaults
    "RET504", # Unnecessary variable assignment before return
    "SIM108", # Use ternary operator instead of if-else-block
]

# 每个文件的忽略规则
[tool.ruff.lint.per-file-ignores]
# 测试文件允许使用 assert
"tests/*" = ["S101", "ANN", "D"]
# 脚本文件放宽要求
"scripts/*" = ["D", "ANN"]

# =============================================================================
# Import Sorting（isort 兼容配置）
# =============================================================================
[tool.ruff.lint.isort]
known-first-party = ["fireshot"]
known-third-party = ["firecrawl", "pydantic", "dotenv"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = 2

# =============================================================================
# Docstring 配置
# =============================================================================
[tool.ruff.lint.pydocstyle]
convention = "google"  # Google 风格的文档字符串

# =============================================================================
# Ruff Formatter 配置
# =============================================================================
[tool.ruff.format]
# 引号风格（项目标准：双引号）
quote-style = "double"

# 缩进风格
indent-style = "space"

# 保留魔术逗号
skip-magic-trailing-comma = false

# 行尾
line-ending = "auto"

# 文档字符串格式化
docstring-code-format = true

# =============================================================================
# Pytest 配置
# =============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# =============================================================================
# Coverage 配置
# =============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# =============================================================================
# MyPy 配置
# =============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

# 第三方库类型检查
[[tool.mypy.overrides]]
module = [
    "firecrawl.*",
    "dotenv.*",
]
ignore_missing_imports = true
